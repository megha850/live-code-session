import mongoose from "mongoose";
import AuthRoles from "../utils/authRoles.js";
import bcrypt from "bcrypt.js"
import Jwt  from "jsonwebtoken";
import config from "../config/index.js";
import crypto from "crypto";

const userSchema = mongoose.Schema({
    name: {
        type: String,
        required: ["true", "Name must be less than 50 chars"]
    },
    email: {
        type: String,
        required: ["true", "Email is required"],
    },
    password: {
        type: String,
        required: ["true", "Password is required"],
        minLength: [8, "password must be at least 8 chars"],
        select: false
    },
    role: {
        type: String,
        enum: Object.values(AuthRoles)
    },
    forgotPasswordToken: String,
    forgotPasswordExpiry: Date
}, {timestamps: true})

// Encrypt the password before saving: HOOKS

userSchema.pre("save", async function(next){
    if (!this.isModified("password")) return next()
    this.password = await bcrypt.hash(this.password, 10)
    next()
    
})

userSchema.methods = {
    // compare password 
    comparePassword: async function(enteredPassword){
       return await bcrypt.compare(enteredPassword, this.password)
    },
    // generate JWT Token
    getJWTtoken: function(){
        Jwt.sign({_id: this._id, role: this.role}, config.JWT_SECRET, 
        {
            expiresIn: config.JWT_EXPIRY
        })
    },
    // generate forgot password token
    generateForgotPasswordToken: function (){
       const forgotToken = crypto.randomBytes(20).toString("hex")

    // just to encrypt the token generated by crypto
       this.forgotPasswordToken = crypto
       .createHash("sha256")
       .update(forgotToken)
       .digest("hex")

    // time for token to expire
    this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000
    
    }
}


export default mongoose.model("user", userSchema)